/**
 *  ++=================++
 *  ||  StandCalendar  ||
 *  ++=================++
 *  ++==========================++
 *  ||  JS Module  |  calendar  ||
 *  ++==========================++
 *
 *  calendar/.
 *  components/.
 *  DnDCalendar.js
 *
 *  Sample Calendar with Drag and Drop
 *  see: https://github.com/intljusticemission/react-big-calendar/blob/master/examples/demos/dnd.js
 *
 *  +-------------------------------+
 *  |  generated by Cameron Vargas  |
 *  +-------------------------------+
 *
 **/

import React, { Component } from 'react'
import PropTypes from 'prop-types'

import Calendar from 'react-big-calendar'
import moment from 'moment'
import withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop'

// init moment
Calendar.momentLocalizer(moment)
const DCalendar = withDragAndDrop(Calendar)

class DnDCalendar extends Component {
  constructor(props) {
    super(props)

    this.state = {
      events: [
        {
          id: 1,
          start: new Date(),
          end: new Date(moment().add(1, 'days')),
          title: 'Some title'
        }
      ]
    }

    this.moveEvent = this.moveEvent.bind(this)
    this.resizeEvent = this.resizeEvent.bind(this)
    this.newEvent = this.newEvent.bind(this)
    this.onEventResize = this.onEventResize.bind(this)
    this.onEventDrop = this.onEventDrop.bind(this)
    this.handleEvent = this.handleEvent.bind(this)
  }

  moveEvent({ event, start, end }) {
    const { events } = this.state

    const idx = events.indexOf(event)
    const updatedEvent = { ...event, start, end }

    const nextEvents = [...events]
    nextEvents.splice(idx, 1, updatedEvent)

    this.setState({
      events: nextEvents
    })

    console.log(`${event.title} was dropped onto ${event.start}`)
  }

  resizeEvent(resizeType, { event, start, end }) {
    const { events } = this.state

    const nextEvents = events.map(existingEvent => {
      return existingEvent.id === event.id
        ? { ...existingEvent, start, end }
        : existingEvent
    })

    this.setState({
      events: nextEvents
    })

    console.log(`${event.title} was resized to ${start}-${end}`)
  }

  newEvent(event) {
    let idList = this.state.events.map((a) => a.id)
    let newId = Math.max(...idList) + 1
    let hour = {
      id: newId,
      title: 'New Event',
      allDay: event.slots.length === 1,
      start: event.start,
      end: event.end
    }
    this.setState({
      events: this.state.events.concat([hour])
    })
  }

  onEventResize(type, { event, start, end, allDay }) {
    this.setState(state => {
      state.events[0].start = start
      state.events[0].end = end
      return { events: state.events }
    })
  }

  onEventDrop({ event, start, end, allDay }) {
    console.log(start)
  }

  handleEvent() {
    this.props.handleEvent()
  }

  render() {
    return (
      <div className={this.props.style}>
        <DCalendar
          selectable
          events={this.state.events}
          onEventDrop={this.moveEvent}
          onEventResize={this.resizeEvent}
          onSelectSlot={this.newEvent}
          defaultDate={new Date()}
          defaultView='month'
          resizable
          style={{ height: '100vh' }}
        />
      </div>
    )
  }
}

DnDCalendar.propTypes = {
  style: PropTypes.string,
  children: PropTypes.oneOfType([
    PropTypes.array,
    PropTypes.element,
    PropTypes.string
  ]),

  // pass down methods
  handleEvent: PropTypes.func
}

DnDCalendar.defaultProps = {
  style: 'big-cal',
  handleEvent: () => {}
}

export default DnDCalendar
